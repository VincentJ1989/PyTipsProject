1.关于循环中断的说明
    1.1 break:跳出当前的for、while循环;
    1.2 continue:终止当前这一次执行，进行循环的下一次迭代；
    1.3 pass:该语句什么都不做，是为了保持程序结构的完整性。常用在语法上需要一条语句但又不需要任何操作的情况下。

2.def 函数中，有返回则return 数据；没有则直接省略。

3.函数的本质是对象，可以被调用的函数，都会继承了可调用的方法call；所以可以用callable来检查韩式是否可以被调用。

4.简单的函数分类：
    4.1 普通的函数：使用def定义的函数；
    4.2 匿名函数：使用lambda关键字来定义的函数；
    4.3 可迭代函数：属于一种特殊的内置函数；
    4.4 递归函数：自己调用自己的函数；
    4.5 偏函数：使用partial关键字定义的函数；

5.定义参数及调用函数
    5.1 列表方式定义函数与调用方式：fun(parm1,parm2,...)
        5.1.1 按照形参的顺序依次传入
        5.1.2 传入指定形参(比较推荐)
    5.2 星号方式定义参数与调用方式
        在星号后面的参数都必须要指定参数名称；
    5.3 带默认实参的可以省略传参，取默认值，但必须放在没有默认值的形参背后；
    5.4 fun(*parms)--元组或者列表解包参数；
    5.5 fun(**parms)--字典的解包参数；
    5.6 混合使用注意点：
        5.6.1 字典和元组解包参数，同时作为形参来接收实参：可以指定，也可以不指定形参来传值，
              但不指定形参的实参在前，指定形参的实参在后；
        5.6.2 字典或元组解包参数，与单个形参混用
               5.6.2.1 元组+单形参：单形参需要制定参数名称；
               5.6.2.2 单形参+元组：不需要指定
        5.6.3 字典解包参数、元组参数、单形参混用
              字典的解包必须在最后，其他二者参考5.6.2是使用
    5.7 使用解包参数的函数，不能对参数修改；而使用列表传参的函数，是可以对参数进行修改的；

6.isinstance函数是检查变量的类型；

7.关于参数传递简要说明：
    函数调用时，实参传递到形参的过程中有2种情况：传值和传引用
    7.1 对于不可变对象：传值，可以使用实参的值，但无法改变；
    7.2 对于可变对象：传引用，可以改变实参的值。

8.匿名函数一般适用于单行代码函数，而且不能存在return关键字。

9.偏函数：是对原始函数的二次封装，它是属于寄生在原始函数上的函数，其实就是类似Java重重载函数，给一些属性设置了默认值；

10.Python中对递归调用没做特别的优化处理，所以尽量避免使用递归函数。

11.eval和exec的区别
    11.1 eval：执行完要返回结果；
    11.2 exec：执行完不返回结果；

12.在编码时，一般会使用repr函数来生成动态的字符串，再传入eval或者exec函数内，实现动态执行代码的功能。

13.生成器和迭代器的区别
    13.1 迭代器是所有的内容都在内存里，使用next函数来依次往下遍历；
    13.2 生成器不会把内容放到内存里，每次调用next函数时，返回的都是本次计算处理啊的那个元素，用完之后立即销毁。

14.变量的作用域
    14.1 L:本地作用域，被当前函数包括；
    14.2 E:上一层结构中def或者lambda的本地作用域(其实就是函数嵌套的情况)
    14.3 G:全局作用域，不被任何函数包括；
    14.4 B:内置作用域，是Python内部的命名空间；

15.装饰器：其本质是一个闭合函数，该闭合函数的自由变量是一个函数。

16.读写文件的一般步骤
    16.1 打开文件：使用open函数，返回的是一个文件对象；
    16.2 具体读写：使用该文件对象的read、write等方法；
    16.3 关闭文件：使用该文件对象的close函数。

17.打开文件：open(文件名，mode)
    17.1 r：只读。文件必须存在；---默认模式
    17.2 w：只写。如果已存在，则覆盖；反之则新建文件；
    17.3 +：读写（不能单独使用）；
    17.4 a：以只读的方式打开文件用于在文件后追加内容。如果文件不存在，则创建文件；
    17.5 b：以二进制模式打开(不能单独使用)；
    还有一些其他的，例如：
    17.6 r+:读写。文件必须存在。当写入时，会清空原内容；
    17.7 w+：读写。如果文件不存在，则创建文件；如果已存在，则清空原内容；
    17.7 a+：读写：如果文件不存在，则创建文件；如果已存在，则进行追加内容。

18. 文本模式与二进制模式的区别
    18.1 在windows系统中，文本模式下，默认将行末标识符\r\n在读取时转为\r\n，而在写时将\n转为\r\n。
         这个隐藏的行为对于文本文件是没有问题的。但是一文本模式打卡二进制数据文件(例如JPEG或EXE)则会发生问题，因为它改变了具体内容；
    18.2 在Unis/Linux系统中，行末标识符为\n，即文件以\n代表换行。所以在该环境下文本模式和二进制模式并无区别。

19.函数open返回的对象
    19.1 文本模式：返回TextIOWrapper对象；
    19.2 读取二进制模式：即"r+b"模式，返回BufferedReader对象；
    19.3 写入和追加二进制模式：即"w+b"，"a+b"模式，返回BufferedWriter对象；
    19.4 读/写模式：即含有符号"+"的打开模式，返回BufferedRandom对象。

20.序列化函数pickle（前二者实现基于内存的对象与二进制的互转，后二者是基于文件的互转）
    20.1 dumps：将python中的对象序列化成二进制对象，并返回；
    20.2 loads：从给定的pickle数据中读取并返回对象；
    20.3 dump：将python中的对象序列化成二进制对象，并写入文件；
    20.4 load：读取指定的序列化数据文件，并返回对象
